import { createSSGHelpers } from "@trpc/react/ssg";
import type { NextPage } from "next";
import Head from "next/head";
import { FormEvent, useEffect, useState } from "react";
import { appRouter, createContext } from "../server/router";
import { trpc } from "../utils/trpc";
import superjson from "superjson";

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

export async function getServerSideProps() {
  const ssg = await createSSGHelpers({
    router: appRouter,
    ctx: await createContext(),
    transformer: superjson
  });
  await ssg.prefetchQuery("users.getAll");

  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
  };
}

const Home: NextPage = () => {
  const users = trpc.useQuery(["users.getAll"]);
  const createUser = trpc.useMutation(["users.addOne"]);
  const deleteUser = trpc.useMutation(["users.deleteOne"]);

  const [name, setName] = useState('');
  const [mail, setMail] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    deleteUser.isError && setError(deleteUser.error.message);
  }, [deleteUser.error?.message, deleteUser.isError]);

  const handleDelete = async (mail: string) => {
    setError('');
    await deleteUser.mutateAsync({ mail: mail });
    users.refetch();
  }

  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    await createUser.mutateAsync({ name, mail });
    users.refetch();
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>
        <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-2 lg:w-2/3">
          <TechnologyCard
            name="NextJS"
            description="The React framework for production"
            documentation="https://nextjs.org/"
          />
          <TechnologyCard
            name="TypeScript"
            description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
            documentation="https://www.typescriptlang.org/"
          />
          <TechnologyCard
            name="TailwindCSS"
            description="Rapidly build modern websites without ever leaving your HTML"
            documentation="https://tailwindcss.com/"
          />
          <TechnologyCard
            name="tRPC"
            description="End-to-end typesafe APIs made easy"
            documentation="https://trpc.io/"
          />
        </div>
        {error && <p className="mt-3 text-2xl text-rose-600">{error}</p>}
        <div className="mt-3 text-2xl text-blue-500 flex flex-col justify-center items-center w-full">
          {users.data?.map((user, i) => <UserCard key={i} {...user} handleDelete={handleDelete} />)}
        </div>
        <form className="mt-3 text-2xl text-blue-500 flex flex-col justify-center items-center w-full" onSubmit={onSubmit}>
          <input type="text" className="border-2 rounded" name="userName" value={name} onChange={e=> setName(e.target.value)}/>
          <input type="email" className="border-2 rounded mt-2" name="userMail" value={mail} onChange={e=> setMail(e.target.value)}/>
          <button className="mt-3 px-12 py-2 text-2xl text-rose-600 flex justify-center items-center border-2 rounded border-rose-600" type="submit">Submit!</button>
        </form>
      </main>
    </>
  );
};

const UserCard = ({
  name,
  mail,
  handleDelete
}: { name: string | null, mail: string, handleDelete: (e: string) => Promise<void> }) => {
  return (
    <div className="flex items-center justify-center mt-3">
      <p className="text-2xl text-blue-500 flex justify-center items-center">{name} - {mail}</p>
      <button onClick={() => handleDelete(mail)} className="ml-2 text-2xl text-rose-600">Delete</button>
    </div>
  );
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};

export default Home;
