import { createSSGHelpers } from "@trpc/react/ssg";
import type { NextPage } from "next";
import Head from "next/head";
import Image from 'next/future/image'
import { FormEvent, useEffect, useState } from "react";
import dynamic from 'next/dynamic'
import superjson from "superjson";

import { appRouter, createContext } from "server/router";
import { trpc } from "utils/trpc";
import { Footer } from "widgets/footer";
import { Genre, Movie, MovieToGenre } from "@prisma/client";

type TMovieCard = Movie & {
  genres: {
    genre: Genre
  }[]
};

const Header = dynamic<{}>(() =>
  import('widgets/header').then((mod) => mod.Header)
);

export async function getServerSideProps() {
  const ssg = await createSSGHelpers({
    router: appRouter,
    ctx: await createContext(),
    transformer: superjson
  });
  await Promise.all([() => ssg.prefetchQuery("users.getAll"), () => ssg.prefetchQuery("movies.getAll")]);

  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
  };
}

const Home: NextPage = () => {
  const users = trpc.useQuery(["users.getAll"]);
  const movies = trpc.useQuery(["movies.getAll"]);
  const createUser = trpc.useMutation(["users.addOne"]);
  const deleteUser = trpc.useMutation(["users.deleteOne"]);

  const [name, setName] = useState('');
  const [mail, setMail] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    deleteUser.isError && setError(deleteUser.error.message);
  }, [deleteUser.error?.message, deleteUser.isError]);

  const handleDelete = async (mail: string) => {
    setError('');
    await deleteUser.mutateAsync({ mail: mail });
    users.refetch();
  }

  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    await createUser.mutateAsync({ name, mail });
    users.refetch();
  };

  return (
    <>
      <Head>
        <title>Movie-App</title>
        <meta name="description" content="Generated by create-t3-app Movie-App" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className="container mx-auto flex flex-col items-center justify-center p-4 md:w-9/12 lg:w-8/12">
        <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
          {movies.data?.map((movie, i) => <MovieCard key={i} {...movie} />)}
        </section>
        {error && <p className="mt-3 text-2xl text-rose-600">{error}</p>}
        <div className="mt-3 text-2xl text-blue-500 flex flex-col justify-center items-center w-full">
          {users.data?.map((user, i) => <UserCard key={i} {...user} handleDelete={handleDelete} />)}
        </div>
        <form className="mt-3 mb-3 text-2xl text-blue-500 flex flex-col justify-center items-center w-full" onSubmit={onSubmit}>
          <input type="text" className="border-2 rounded" name="userName" value={name} onChange={e => setName(e.target.value)} />
          <input type="email" className="border-2 rounded mt-2" name="userMail" value={mail} onChange={e => setMail(e.target.value)} />
          <button className="mt-3 px-12 py-2 text-2xl text-rose-600 flex justify-center items-center border-2 rounded border-rose-600" type="submit">Submit!</button>
        </form>
      </main>
      <Footer />
    </>
  );
};

const UserCard = ({
  name,
  mail,
  handleDelete
}: { name: string | null, mail: string, handleDelete: (e: string) => Promise<void> }) => {
  return (
    <div className="flex items-center justify-center mt-3">
      <p className="text-2xl text-blue-500 flex justify-center items-center">{name} - {mail}</p>
      <button onClick={() => handleDelete(mail)} className="ml-2 text-2xl text-rose-600">Delete</button>
    </div>
  );
};

const MovieCard = ({
  title,
  genres,
  posterPath,
  releaseDate,
}: TMovieCard) => {
  const releaseDateFormatted = new Date(releaseDate);
  return (
    <div className="relative h-full flex flex-col justify-between">
      <div>
        <div className="relative w-full bg-white rounded-lg overflow-hidden sm:aspect-w-2 sm:aspect-h-1 lg:aspect-w-1 lg:aspect-h-1 ">
          <Image src={posterPath || ""} alt={title} className="h-120 w-full object-center object-cover hover:opacity-75 hover:cursor-pointer" width={260} height={480} />
        </div>
        <h3 className="mt-6 text-sm text-gray-500">
          {genres.map(_ => _.genre.title).join(', ')}
        </h3>
        <p className="text-base font-semibold text-gray-900">{title}</p>
      </div>
      <div>
        {releaseDateFormatted && (
          <h3 className="mt-3 text-sm text-gray-500">
            {releaseDateFormatted.toLocaleDateString()}
          </h3>
        )}
        <button className="mt-3 w-full px-8 flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-mainColor hover:bg-hoverColorBg hover:cursor-pointer font-bold">View</button>
      </div>
    </div>
  );
};

export default Home;
