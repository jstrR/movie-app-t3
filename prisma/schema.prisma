generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  password          String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String    @id @default(cuid())
  name         String?
  mail         String    @unique
  mailVerified DateTime? @map("mail_verified")
  image        String?
  role         Role      @default(USER)
  movierRatings MovieRating[]
  comments Comment[]
  accounts     Account[]
  sessions     Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id   String    @id @default(cuid())
  title String @unique
  tagline String?
  voteAverage Float @default(0) @map("vote_average")
  posterPath String? @map("poster_path")
  releaseDate DateTime @map("release_date")
  overview String
  budget Float @default(0)
  revenue Float @default(0)
  runtime Int @default(0)
  genres MovieToGenre[]
  trailerUrl String? @map("trailer_url")
  price Float @default(0)
  places Int
  movieRatings MovieRating[] 
  comments Comment[]
}

model Genre {
  id String @id @default(cuid())
  title String @unique
  movies MovieToGenre[]
}

model MovieToGenre {
  movie      Movie @relation(fields: [movieId], references: [id])
  movieId    String @map("movie_id")
  genre      Genre @relation(fields: [genreId], references: [id])
  genreId    String @map("genre_id")

  @@id([movieId, genreId])
}

model Comment {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  movie Movie @relation(fields: [movieId], references: [id])
  movieId String @map("movie_id")
  message String
  date DateTime
}

model MovieRating {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  movie Movie @relation(fields: [movieId], references: [id])
  movieId String @map("movie_id")
  rating Float @default(0)
}
